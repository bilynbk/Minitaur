/**
 * @authors Avik De <avikde@gmail.com>

  This file is part of koduino <https://github.com/avikde/koduino>

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation, either
  version 3 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */
#include "variant.h"
#include "types.h"
#include "USARTClass.h"
#include "adc.h"

// >>> Autogenerated by variant_codegen.py >>>

const uint8_t PA0 = 0;
const uint8_t PA1 = 1;
const uint8_t PA2 = 2;
const uint8_t PA3 = 3;
const uint8_t PA4 = 4;
const uint8_t PA5 = 5;
const uint8_t PA6 = 6;
const uint8_t PA7 = 7;
const uint8_t PA8 = 8;
const uint8_t PA9 = 9;
const uint8_t PA10 = 10;
const uint8_t PA11 = 11;
const uint8_t PA12 = 12;
const uint8_t PA13 = 13;
const uint8_t PA14 = 14;
const uint8_t PA15 = 15;
const uint8_t PB0 = 16;
const uint8_t PB1 = 17;
const uint8_t PB2 = 18;
const uint8_t PB3 = 19;
const uint8_t PB4 = 20;
const uint8_t PB5 = 21;
const uint8_t PB6 = 22;
const uint8_t PB7 = 23;
const uint8_t PB8 = 24;
const uint8_t PB9 = 25;
const uint8_t PB10 = 26;
const uint8_t PB11 = 27;
const uint8_t PB12 = 28;
const uint8_t PB13 = 29;
const uint8_t PB14 = 30;
const uint8_t PB15 = 31;
const uint8_t PC0 = 32;
const uint8_t PC1 = 33;
const uint8_t PC2 = 34;
const uint8_t PC3 = 35;
const uint8_t PC4 = 36;
const uint8_t PC5 = 37;
const uint8_t PC6 = 38;
const uint8_t PC7 = 39;
const uint8_t PC8 = 40;
const uint8_t PC9 = 41;
const uint8_t PC10 = 42;
const uint8_t PC11 = 43;
const uint8_t PC12 = 44;
const uint8_t PC13 = 45;
const uint8_t PC14 = 46;
const uint8_t PC15 = 47;
const uint8_t PD0 = 48;
const uint8_t PD1 = 49;
const uint8_t PD2 = 50;
const uint8_t PD3 = 51;
const uint8_t PD4 = 52;
const uint8_t PD5 = 53;
const uint8_t PD6 = 54;
const uint8_t PD7 = 55;
const uint8_t PD8 = 56;
const uint8_t PD9 = 57;
const uint8_t PD10 = 58;
const uint8_t PD11 = 59;
const uint8_t PD12 = 60;
const uint8_t PD13 = 61;
const uint8_t PD14 = 62;
const uint8_t PD15 = 63;
const uint8_t PE0 = 64;
const uint8_t PE1 = 65;
const uint8_t PE2 = 66;
const uint8_t PE3 = 67;
const uint8_t PE4 = 68;
const uint8_t PE5 = 69;
const uint8_t PE6 = 70;
const uint8_t PE7 = 71;
const uint8_t PE8 = 72;
const uint8_t PE9 = 73;
const uint8_t PE10 = 74;
const uint8_t PE11 = 75;
const uint8_t PE12 = 76;
const uint8_t PE13 = 77;
const uint8_t PE14 = 78;
const uint8_t PE15 = 79;
const uint8_t PF0 = 80;
const uint8_t PF1 = 81;
const uint8_t PF2 = 82;
const uint8_t PF4 = 83;
const uint8_t PF6 = 84;
const uint8_t PF9 = 85;
const uint8_t PF10 = 86;

PinInfo PIN_MAP[] = {
  {GPIOA, 0, 1, 1, TIMER2, 1, NOT_SET, NOT_SET},
  {GPIOA, 1, 2, 1, TIMER2, 2, NOT_SET, NOT_SET},
  {GPIOA, 2, 3, 1, TIMER2, 3, NOT_SET, NOT_SET},
  {GPIOA, 3, 4, 1, TIMER2, 4, NOT_SET, NOT_SET},
  {GPIOA, 4, NOT_SET, 2, TIMER3, 2, NOT_SET, NOT_SET},
  {GPIOA, 5, NOT_SET, 1, TIMER2, 1, NOT_SET, NOT_SET},
  {GPIOA, 6, NOT_SET, 1, TIMER16, 1, NOT_SET, NOT_SET},
  {GPIOA, 7, NOT_SET, 1, TIMER17, 1, NOT_SET, NOT_SET},
  {GPIOA, 8, NOT_SET, 6, TIMER1, 1, NOT_SET, NOT_SET},
  {GPIOA, 9, NOT_SET, 6, TIMER1, 2, NOT_SET, NOT_SET},
  {GPIOA, 10, NOT_SET, 6, TIMER1, 3, NOT_SET, NOT_SET},
  {GPIOA, 11, NOT_SET, 11, TIMER1, 4, NOT_SET, NOT_SET},
  {GPIOA, 12, NOT_SET, 1, TIMER16, 1, NOT_SET, NOT_SET},
  {GPIOA, 13, NOT_SET, 10, TIMER4, 3, NOT_SET, NOT_SET},
  {GPIOA, 14, NOT_SET, 5, TIMER8, 2, NOT_SET, NOT_SET},
  {GPIOA, 15, NOT_SET, 1, TIMER2, 1, NOT_SET, NOT_SET},
  {GPIOB, 0, NOT_SET, 2, TIMER3, 3, NOT_SET, NOT_SET},
  {GPIOB, 1, NOT_SET, 2, TIMER3, 4, NOT_SET, NOT_SET},
  {GPIOB, 2, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOB, 3, NOT_SET, 1, TIMER2, 2, NOT_SET, NOT_SET},
  {GPIOB, 4, NOT_SET, 1, TIMER16, 1, NOT_SET, NOT_SET},
  {GPIOB, 5, NOT_SET, 10, TIMER17, 1, NOT_SET, NOT_SET},
  {GPIOB, 6, NOT_SET, 2, TIMER4, 1, NOT_SET, NOT_SET},
  {GPIOB, 7, NOT_SET, 2, TIMER4, 2, NOT_SET, NOT_SET},
  {GPIOB, 8, NOT_SET, 2, TIMER4, 3, NOT_SET, NOT_SET},
  {GPIOB, 9, NOT_SET, 2, TIMER4, 4, NOT_SET, NOT_SET},
  {GPIOB, 10, NOT_SET, 1, TIMER2, 3, NOT_SET, NOT_SET},
  {GPIOB, 11, NOT_SET, 1, TIMER2, 4, NOT_SET, NOT_SET},
  {GPIOB, 12, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOB, 13, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOB, 14, NOT_SET, 1, TIMER15, 1, NOT_SET, NOT_SET},
  {GPIOB, 15, NOT_SET, 1, TIMER15, 2, NOT_SET, NOT_SET},
  {GPIOC, 0, 6, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOC, 1, 7, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOC, 2, 8, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOC, 3, 9, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOC, 4, 5, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOC, 5, 11, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOC, 6, NOT_SET, 4, TIMER8, 1, NOT_SET, NOT_SET},
  {GPIOC, 7, NOT_SET, 4, TIMER8, 2, NOT_SET, NOT_SET},
  {GPIOC, 8, NOT_SET, 4, TIMER8, 3, NOT_SET, NOT_SET},
  {GPIOC, 9, NOT_SET, 4, TIMER8, 4, NOT_SET, NOT_SET},
  {GPIOC, 10, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOC, 11, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOC, 12, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOC, 13, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOC, 14, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOC, 15, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOD, 0, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOD, 1, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOD, 2, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOD, 3, NOT_SET, 2, TIMER2, 1, NOT_SET, NOT_SET},
  {GPIOD, 4, NOT_SET, 2, TIMER2, 2, NOT_SET, NOT_SET},
  {GPIOD, 5, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOD, 6, NOT_SET, 2, TIMER2, 4, NOT_SET, NOT_SET},
  {GPIOD, 7, NOT_SET, 2, TIMER2, 3, NOT_SET, NOT_SET},
  {GPIOD, 8, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOD, 9, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOD, 10, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOD, 11, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOD, 12, NOT_SET, 2, TIMER4, 1, NOT_SET, NOT_SET},
  {GPIOD, 13, NOT_SET, 2, TIMER4, 2, NOT_SET, NOT_SET},
  {GPIOD, 14, NOT_SET, 2, TIMER4, 3, NOT_SET, NOT_SET},
  {GPIOD, 15, NOT_SET, 2, TIMER4, 4, NOT_SET, NOT_SET},
  {GPIOE, 0, NOT_SET, 4, TIMER16, 1, NOT_SET, NOT_SET},
  {GPIOE, 1, NOT_SET, 4, TIMER17, 1, NOT_SET, NOT_SET},
  {GPIOE, 2, NOT_SET, 2, TIMER3, 1, NOT_SET, NOT_SET},
  {GPIOE, 3, NOT_SET, 2, TIMER3, 2, NOT_SET, NOT_SET},
  {GPIOE, 4, NOT_SET, 2, TIMER3, 3, NOT_SET, NOT_SET},
  {GPIOE, 5, NOT_SET, 2, TIMER3, 4, NOT_SET, NOT_SET},
  {GPIOE, 6, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOE, 7, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOE, 8, NOT_SET, 2, TIMER1, 1, NOT_SET, NOT_SET},
  {GPIOE, 9, NOT_SET, 2, TIMER1, 1, NOT_SET, NOT_SET},
  {GPIOE, 10, NOT_SET, 2, TIMER1, 2, NOT_SET, NOT_SET},
  {GPIOE, 11, NOT_SET, 2, TIMER1, 2, NOT_SET, NOT_SET},
  {GPIOE, 12, NOT_SET, 2, TIMER1, 3, NOT_SET, NOT_SET},
  {GPIOE, 13, NOT_SET, 2, TIMER1, 3, NOT_SET, NOT_SET},
  {GPIOE, 14, NOT_SET, 2, TIMER1, 4, NOT_SET, NOT_SET},
  {GPIOE, 15, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOF, 0, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOF, 1, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOF, 2, 10, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOF, 4, 5, NOT_SET, NOT_SET, NOT_SET, NOT_SET, NOT_SET},
  {GPIOF, 6, NOT_SET, 2, TIMER4, 4, NOT_SET, NOT_SET},
  {GPIOF, 9, NOT_SET, 3, TIMER15, 1, NOT_SET, NOT_SET},
  {GPIOF, 10, NOT_SET, 3, TIMER15, 2, NOT_SET, NOT_SET},
};

const uint8_t TIMER1 = 0;
const uint8_t TIMER2 = 1;
const uint8_t TIMER3 = 2;
const uint8_t TIMER4 = 3;
const uint8_t TIMER8 = 4;
const uint8_t TIMER15 = 5;
const uint8_t TIMER16 = 6;
const uint8_t TIMER17 = 7;
const uint8_t TIMER6 = 8;
const uint8_t TIMER7 = 9;

TimerChannelData timer1ch[4] = {
  {0, false, 0, 0, 0, 0},
  {0, false, 0, 0, 0, 0},
  {0, false, 0, 0, 0, 0},
  {0, false, 0, 0, 0, 0}
};
TimerChannelData timer2ch[4] = {
  {0, false, 0, 0, 0, 0},
  {0, false, 0, 0, 0, 0},
  {0, false, 0, 0, 0, 0},
  {0, false, 0, 0, 0, 0}
};
TimerChannelData timer3ch[4] = {
  {0, false, 0, 0, 0, 0},
  {0, false, 0, 0, 0, 0},
  {0, false, 0, 0, 0, 0},
  {0, false, 0, 0, 0, 0}
};
TimerChannelData timer4ch[4] = {
  {0, false, 0, 0, 0, 0},
  {0, false, 0, 0, 0, 0},
  {0, false, 0, 0, 0, 0},
  {0, false, 0, 0, 0, 0}
};
TimerChannelData timer8ch[4] = {
  {0, false, 0, 0, 0, 0},
  {0, false, 0, 0, 0, 0},
  {0, false, 0, 0, 0, 0},
  {0, false, 0, 0, 0, 0}
};
TimerChannelData timer15ch[2] = {
  {0, false, 0, 0, 0, 0},
  {0, false, 0, 0, 0, 0}
};
TimerChannelData timer16ch[1] = {
  {0, false, 0, 0, 0, 0}
};
TimerChannelData timer17ch[1] = {
  {0, false, 0, 0, 0, 0}
};

TimerInfo TIMER_MAP[] = {
  {TIM1, TIM1_CC_IRQn, 1000, 0, timer1ch, 0},
  {TIM2, TIM2_IRQn, 1000, 0, timer2ch, 0},
  {TIM3, TIM3_IRQn, 1000, 0, timer3ch, 0},
  {TIM4, TIM4_IRQn, 1000, 0, timer4ch, 0},
  {TIM8, TIM8_CC_IRQn, 1000, 0, timer8ch, 0},
  {TIM15, TIM1_BRK_TIM15_IRQn, 1000, 0, timer15ch, 0},
  {TIM16, TIM1_UP_TIM16_IRQn, 1000, 0, timer16ch, 0},
  {TIM17, TIM1_TRG_COM_TIM17_IRQn, 1000, 0, timer17ch, 0},
  {TIM6, TIM6_DAC_IRQn, 1000, 0, (TimerChannelData *)0, 0},
  {TIM7, TIM7_IRQn, 1000, 0, (TimerChannelData *)0, 0},
  // ^^^ Look up IRQn names from CMSIS device header ^^^
};

// <<< Autogenerated by variant_codegen.py <<<

// Use the 3 basic timers and two others
TimebaseChannel TIMEBASE_MAP[] = {
  {.timer = NOT_SET, .isr = 0}, // 0
  {.timer = NOT_SET, .isr = 0} // 1
};
// Serial
USARTInfo USART_MAP[5] = {
  { USART1, USART1_IRQn, PA9, PA10 },
  { USART2, USART2_IRQn, PA2, PA3 },
  { USART3, USART3_IRQn, PB10, PB11 },
  { UART4, UART4_IRQn, PC10, PC11 },
  { UART5, UART5_IRQn, PC12, PD2 }
};
USARTClass Serial1(&USART_MAP[0]);
USARTClass Serial2(&USART_MAP[1]);
USARTClass Serial3(&USART_MAP[2]);
USARTClass Serial4(&USART_MAP[3]);
USARTClass Serial5(&USART_MAP[4]);


bool isTimer32Bit(uint8_t tim) {
  return false;
}

uint8_t numChannelsInTimer(uint8_t tim) {
  if (tim < TIMER15)
    return 4;
  else if (tim < TIMER16)
    return 2;
  else if (tim < TIMER6)
    return 1;
  else
    return 0;
}

bool isAnalogPin(uint8_t pin) {
  return (PIN_MAP[pin].adcChannel != NOT_SET);
}

void variantInit() {
  TIMEBASE_MAP[0].timer = TIMER6;
  TIMEBASE_MAP[1].timer = TIMER7;

  // GPIO
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOD, ENABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOE, ENABLE);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOF, ENABLE);
  // SYSCFG - needed for EXTI
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

  // Timer clocks
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM15, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM16, ENABLE);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM17, ENABLE);
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);

  // USART
  RCC_USARTCLKConfig(RCC_USART1CLK_SYSCLK);
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
  RCC_USARTCLKConfig(RCC_USART2CLK_SYSCLK);
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
  RCC_USARTCLKConfig(RCC_USART3CLK_SYSCLK);
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
  // UART
  RCC_USARTCLKConfig(RCC_UART4CLK_SYSCLK);
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
  RCC_USARTCLKConfig(RCC_UART5CLK_SYSCLK);
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);

  // ADC(s)
  RCC_ADCCLKConfig(RCC_ADC12PLLCLK_Div2);
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_ADC12, ENABLE);
  adcCommonInit();
  adcInit(ADC1);
  adcInit(ADC2);
}
